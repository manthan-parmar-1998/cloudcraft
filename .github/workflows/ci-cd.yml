name: CloudCraft CI/CD
on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/cloudcraft
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/cloudcraft:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/cloudcraft:buildcache,mode=max

  test-deployment:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          driver: docker
          kubernetes-version: v1.28.0
          minikube-version: latest
          memory: 4096
          cpus: 2
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      
      - name: Test Helm Chart
        run: |
          echo "üß™ Testing Helm Chart..."
          helm lint ./helm
          helm template cloudcraft-test ./helm --values ./helm/values-dev.yaml
      
      - name: Deploy to test environment
        run: |
          echo "üöÄ Deploying to test environment..."
          
          # Deploy without waiting first
          helm upgrade --install cloudcraft-test ./helm \
            --values ./helm/values-dev.yaml \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/cloudcraft \
            --set image.tag=latest \
            --namespace test --create-namespace
          
          # Check deployment status
          echo "‚è≥ Waiting for pods to start..."
          for i in {1..30}; do
            kubectl get pods -n test
            if kubectl get pods -n test | grep -q "Running"; then
              echo "‚úÖ Pods are running!"
              break
            fi
            sleep 10
          done
          
          # Get logs and events for debugging
          echo "üìã Pod Status:"
          kubectl get pods -n test -o wide
          
          echo "üìù Recent Events:"
          kubectl get events -n test --sort-by='.lastTimestamp' | head -20
          
          echo "üìä Pod Logs:"
          kubectl logs -n test -l app=cloudcraft-test-cloudcraft --tail=50 || echo "No logs available yet"

  deploy-dev:
    needs: [build-and-push, test-deployment]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          driver: docker
          kubernetes-version: v1.28.0
          minikube-version: latest
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      
      - name: Deploy to Dev
        run: |
          echo "üöÄ Deploying to DEV environment..."
          
          helm upgrade --install cloudcraft-dev ./helm \
            --values ./helm/values-dev.yaml \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/cloudcraft \
            --set image.tag=latest \
            --set image.pullPolicy=Always \
            --namespace dev --create-namespace \
            --timeout=3m \
            --wait=false
          
          # Check status without blocking
          sleep 30
          kubectl get all -n dev
          kubectl logs -n dev -l app=cloudcraft-dev-cloudcraft --tail=20 || true
      
      - name: Smoke Test
        run: |
          echo "üß™ Running smoke tests..."
          kubectl get pods -n dev
          
          # Test if service is responding (if pod is running)
          if kubectl get pods -n dev | grep -q "Running"; then
            POD_NAME=$(kubectl get pods -n dev -l app=cloudcraft-dev-cloudcraft -o jsonpath='{.items[0].metadata.name}' || echo "")
            if [ ! -z "$POD_NAME" ]; then
              kubectl exec -n dev $POD_NAME -- curl -s localhost:5000 || echo "App not ready yet"
            fi
          fi

  deploy-staging:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Start minikube
        uses: medyagh/setup-minikube@master
        with:
          driver: docker
          kubernetes-version: v1.28.0
          minikube-version: latest
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      
      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to STAGING environment..."
          
          helm upgrade --install cloudcraft-staging ./helm \
            --values ./helm/values-staging.yaml \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/cloudcraft \
            --set image.tag=latest \
            --set image.pullPolicy=Always \
            --namespace staging --create-namespace \
            --timeout=3m \
            --wait=false
          
          sleep 30
          kubectl get all -n staging

  deploy-prod:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup production cluster access
        run: |
          echo "üîê Setting up production access..."
          # This is where you'd configure access to a real production cluster
          # For now, we'll use minikube as a placeholder
      
      - name: Start minikube (placeholder for prod)
        uses: medyagh/setup-minikube@master
        with:
          driver: docker
          kubernetes-version: v1.28.0
          minikube-version: latest
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
      
      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to PRODUCTION environment..."
          echo "‚ö†Ô∏è  This is a simulated production deployment"
          
          helm upgrade --install cloudcraft-prod ./helm \
            --values ./helm/values-prod.yaml \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/cloudcraft \
            --set image.tag=latest \
            --namespace prod --create-namespace \
            --timeout=3m \
            --wait=false
          
          sleep 30
          kubectl get all -n prod

  summary:
    needs: [deploy-dev, deploy-staging, deploy-prod]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "üìä Deployment Summary"
          echo "===================="
          echo "‚úÖ Build: ${{ needs.build-and-push.result }}"
          echo "‚úÖ Test: ${{ needs.test-deployment.result }}"
          echo "‚úÖ Dev: ${{ needs.deploy-dev.result }}"
          echo "‚úÖ Staging: ${{ needs.deploy-staging.result }}"
          echo "‚úÖ Production: ${{ needs.deploy-prod.result }}"